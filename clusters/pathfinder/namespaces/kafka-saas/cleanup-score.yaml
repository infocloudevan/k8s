apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  annotations:
    deployment.kubernetes.io/revision: "15"
    kubectl.kubernetes.io/last-applied-configuration: |
      {"apiVersion":"apps/v1","kind":"Deployment","metadata":{"annotations":{},"name":"cleanup-score","namespace":"kafka-saas"},"spec":{"replicas":10,"selector":{"matchLabels":{"app":"cleanup-score"}},"template":{"metadata":{"labels":{"app":"cleanup-score"}},"spec":{"containers":[{"args":["/hyperdark","--log.verbosity=10","cleanup","score","--blackbox.endpoint=https://prod.deception.a.darkcubed.net","--blackbox.mode=api"],"env":[{"name":"HYPERDARK_KAFKA_ENDPOINTS","valueFrom":{"configMapKeyRef":{"key":"kafka-cluster","name":"endpoints"}}},{"name":"HYPERDARK_CACHE_ENDPOINT","valueFrom":{"configMapKeyRef":{"key":"redis-server","name":"endpoints"}}},{"name":"HYPERDARK_CACHE_CLUSTER_ENDPOINTS","valueFrom":{"configMapKeyRef":{"key":"redis-cluster","name":"endpoints"}}},{"name":"HYPERDARK_DB_ENDPOINT","valueFrom":{"secretKeyRef":{"key":"postgres-cluster","name":"endpoints"}}},{"name":"HYPERDARK_ES_ENDPOINTS","valueFrom":{"configMapKeyRef":{"key":"es-cluster","name":"endpoints"}}},{"name":"HYPERDARK_ES_CREDENTIALS","valueFrom":{"secretKeyRef":{"key":"creds","name":"elastic"}}},{"name":"HYPERDARK_ES_SENSOR_SALT","valueFrom":{"secretKeyRef":{"key":"sensor-salt","name":"elastic"}}}],"image":"944254975049.dkr.ecr.us-gov-west-1.amazonaws.com/darkcubed-gov/hyperdark:6e73f41","imagePullPolicy":"Always","name":"cleanup","terminationMessagePath":"/dev/termination-log","terminationMessagePolicy":"FallbackToLogsOnError"}]}}}}
  creationTimestamp: "2019-09-17T03:45:18Z"
  generation: 46
  labels:
    app: cleanup-score
  name: cleanup-score
  namespace: kafka-saas
  resourceVersion: "130973033"
  selfLink: /apis/extensions/v1beta1/namespaces/kafka-saas/deployments/cleanup-score
  uid: 90e7ddd1-d8fd-11e9-845f-0a9658482414
spec:
  progressDeadlineSeconds: 2147483647
  replicas: 10
  revisionHistoryLimit: 10
  selector:
    matchLabels:
      app: cleanup-score
  strategy:
    rollingUpdate:
      maxSurge: 1
      maxUnavailable: 1
    type: RollingUpdate
  template:
    metadata:
      annotations:
        date: "1591030829"
      creationTimestamp: null
      labels:
        app: cleanup-score
    spec:
      containers:
      - args:
        - /hyperdark
        - --log.verbosity=10
        - cleanup
        - score
        - --blackbox.endpoint=https://prod.deception.a.darkcubed.net
        - --blackbox.mode=api
        env:
        - name: HYPERDARK_KAFKA_ENDPOINTS
          valueFrom:
            configMapKeyRef:
              key: kafka-cluster
              name: endpoints
        - name: HYPERDARK_CACHE_ENDPOINT
          valueFrom:
            configMapKeyRef:
              key: redis-server
              name: endpoints
        - name: HYPERDARK_CACHE_CLUSTER_ENDPOINTS
          valueFrom:
            configMapKeyRef:
              key: redis-cluster
              name: endpoints
        - name: HYPERDARK_DB_ENDPOINT
          valueFrom:
            secretKeyRef:
              key: postgres-cluster
              name: endpoints
        - name: HYPERDARK_ES_ENDPOINTS
          valueFrom:
            configMapKeyRef:
              key: es-cluster
              name: endpoints
        - name: HYPERDARK_ES_CREDENTIALS
          valueFrom:
            secretKeyRef:
              key: creds
              name: elastic
        - name: HYPERDARK_ES_SENSOR_SALT
          valueFrom:
            secretKeyRef:
              key: sensor-salt
              name: elastic
        - name: CLEANUP_SCORE_BLACKBOX_AUTH_TOKEN
          valueFrom:
            secretKeyRef:
              key: bearer-token
              name: scorecard-auth
        image: 944254975049.dkr.ecr.us-gov-west-1.amazonaws.com/darkcubed-gov/hyperdark:f2d65ca
        imagePullPolicy: Always
        name: cleanup
        resources: {}
        terminationMessagePath: /dev/termination-log
        terminationMessagePolicy: FallbackToLogsOnError
      dnsPolicy: ClusterFirst
      restartPolicy: Always
      schedulerName: default-scheduler
      securityContext: {}
      terminationGracePeriodSeconds: 30
status:
  availableReplicas: 10
  conditions:
  - lastTransitionTime: "2020-09-15T01:08:20Z"
    lastUpdateTime: "2020-09-15T01:08:20Z"
    message: Deployment has minimum availability.
    reason: MinimumReplicasAvailable
    status: "True"
    type: Available
  observedGeneration: 46
  readyReplicas: 10
  replicas: 10
  updatedReplicas: 10
